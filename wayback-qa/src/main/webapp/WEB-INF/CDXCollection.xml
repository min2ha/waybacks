<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"
       default-init-method="init">

<!--

	This file contains a WaybackCollection implementation using a manually
	created and administered CDX index file(s). It also uses the experimental
	FlatFileResourceFileLocationDB, which enables mapping between ARC/WARC file
	names and their absolute paths/URLs using a sorted text file 
	"path-index.txt".
	
	The format of the path-index.txt is
		<NAME><TAB><PATH-OR-URL>

	Be sure to set the environment variable LC_ALL to "C" before sorting CDX
	files and path-index.txt files.

-->

  <bean id="localcdxcollection" class="org.archive.wayback.webapp.WaybackCollection">

	<property name="resourceStore">
     <bean class="org.archive.wayback.resourcestore.MultipleResourceStore">
      	<property name="failOnFirstUnavailable" value="false"/>
        <property name="stores">
          <list>
          <!-- 
            <ref bean="dlsresourcestore" />
           -->
            <ref bean="httpfsresourcestore" />
          </list>
 	    </property>
      </bean>
	</property>

    <property name="resourceIndex">
      <bean class="org.archive.wayback.resourceindex.LocalSurtFilteringResourceIndex">
        <property name="canonicalizer" ref="waybackCanonicalizer" />
        <property name="source">
            <bean class="org.archive.wayback.resourceindex.WatchedCDXSource">
                <property name="recursive" value="false" />
                <property name="filters">
                    <list>
                        <value>^.+\.cdx$</value>
                    </list>
                </property>
                <property name="path" value="${wayback.cdx.folder}" />
            </bean>
        </property>
        <!-- 
        <property name="surtFile" value="${wayback.ld.surts.file}" />
         -->
        <property name="maxRecords" value="10000" />
        <property name="dedupeRecords" value="true" />    
      </bean>
    </property>
  </bean>

  <!-- This ResourceStore looks for mappings into DLS, using a sorted file that maps HDFS paths to full DLS URLs: -->
  <bean id="dlsresourcestore" class="org.archive.wayback.resourcestore.LocationDBResourceStore">
    <property name="db">
      <bean class="org.archive.wayback.resourcestore.locationdb.FlatFileResourceFileLocationDB">
        <property name="path" value="${wayback.dls.mapping.file}" />
      </bean>
    </property>
  </bean>

  <!-- This ResourceStore looks in HDFS via HttpFS: -->
  <bean id="httpfsresourcestore" class="uk.bl.wa.wayback.ModifiedSimpleResourceStore">
    <property name="regex" value="^([^#]+)(##?.*)?$" />
    <property name="replace" value="${wayback.httpfs.prefix}/webhdfs/v1$1?user.name=hdfs&amp;op=OPEN"/>
  </bean>

</beans>